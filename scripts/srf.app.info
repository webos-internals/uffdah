#!/bin/sh

[ -n "$APPID" ]   || { echo "srf.app.files: APPID not defined"   ; exit 1 ; }
[ -n "$APPNAME" ] || { echo "srf.app.files: APPNAME not defined" ; exit 1 ; }

: ${APPDIR:="/media/cryptofs/apps/usr/palm/applications/$APPID"} 
: ${SRCDIR:="$APPDIR"} 
: ${DSTDIR:="/media/internal/saverestore/$APPID"} 

ZIP=/media/cryptofs/apps/usr/bin/zip
UNZIP=/media/cryptofs/apps/usr/bin/unzip

# Calculate some version numbers
WEBOS_VERSION=`grep PRODUCT_VERSION_STRING /etc/palm-build-info | sed -e 's/.* webOS \([0-9.]*\).*/\1/'`

# Support version comparisons
vercmp() {
    expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
	'(' "$1" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2" : '[^.]*[.]\([^.]*\)' ')' '|' \
	'(' "$1" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2" : '[^.]*[.][^.]*[.]\([^.]*\)' ')'
}

[ -n "$MIN_WEBOS_VERSION" ] && [ "`vercmp $WEBOS_VERSION $MIN_WEBOS_VERSION`" == "-1" ] && exit 0
[ -n "$MAX_WEBOS_VERSION" ] && [ "`vercmp $WEBOS_VERSION $MAX_WEBOS_VERSION`" == "1"  ] && exit 0

webos_version_lt() {
    [ "`vercmp $WEBOS_VERSION $1`" == "-1" ] && return 0
    return 1
}

webos_version_le() {
    [ "`vercmp $WEBOS_VERSION $1`" != "1" ] && return 0
    return 1
}

webos_version_eq() {
    [ "`vercmp $WEBOS_VERSION $1`" == "0" ] && return 0
    return 1
}

webos_version_ge() {
    [ "`vercmp $WEBOS_VERSION $1`" != "-1" ] && return 0
    return 1
}

webos_version_gt() {
    [ "`vercmp $WEBOS_VERSION $1`" == "1" ] && return 0
    return 1
}

# Only keep the most recent archive
MOSTRECENT=
TIMESTAMP=
if [ -d $DSTDIR ] ; then
    MOSTRECENT=`ls -1 $DSTDIR | egrep '^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]T[0-9][0-9][0-9][0-9][0-9][0-9][+-][0-9][0-9][0-9][0-9].zip$' | sort -n | tail -1`
    for f in `ls -1 $DSTDIR` ; do
	if [ "$f" != "$MOSTRECENT" ] ; then
	    rm -rf $DSTDIR/$f
	fi
    done
fi
if [ -n "$MOSTRECENT" ] ; then
    TIMESTAMP=`basename $MOSTRECENT .zip`
fi

if [ "$1" == "info" ] ; then
    
    echo -n '{ "id": "'$APPID'", "title": "'$APPNAME'", '
    if [ -n "$APPNOTE" ] ; then
	echo -n '"note": "'$APPNOTE'", '
    fi
    if [ -n "$TIMESTAMP" ] ; then
	echo '"saved": true, "timestamp": "'$TIMESTAMP'" }'
    else
	echo '"saved": false }'
    fi

    exit 0

elif [ "$1" == "save" ] ; then

    TIMESTAMP=`date +%Y%m%dT%H%M%S%z`

    DSTDIR=$DSTDIR/$TIMESTAMP

    echo $TIMESTAMP

elif [ "$1" == "restore" ] ; then

    if [ -n "$TIMESTAMP" ] ; then
	DSTDIR=$DSTDIR/$TIMESTAMP
    else
	{ echo "No archives available" ; exit 1 ; }
    fi

    echo $TIMESTAMP

fi
